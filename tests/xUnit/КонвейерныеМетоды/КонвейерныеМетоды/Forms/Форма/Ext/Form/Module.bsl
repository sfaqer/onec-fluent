#Область ОбъявлениеПеременных

&НаКлиенте
Перем КонтекстЯдра; // Фреймворк тестирования
&НаКлиенте
Перем Ожидаем;      // Ассерты

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область СобытияФреймворкаТестирования

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	
	КонтекстЯдра = КонтекстЯдраПараметр;
	Ожидаем      = КонтекстЯдра.Плагин("УтвержденияBDD");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаборТестов(НаборТестов, КонтекстЯдраПараметр) Экспорт
	
	КонтекстЯдра = КонтекстЯдраПараметр;
	
	НаборТестов.Добавить("ТестДолжен_ПолучитьИзПроцессораКоллекцийМассив");
	НаборТестов.Добавить("ТестДолжен_ПолучитьПервыеНесколькоЭлементов");
	НаборТестов.Добавить("ТестДолжен_ПропуститьНесколькоЭлементов");
	НаборТестов.Добавить("ТестДолжен_ПолучитьРазличныеЭлементы");
	НаборТестов.Добавить("ТестДолжен_ПолучитьУвеличитьВсеЭлементыНаЕдиницуЧерезОбработку");
	НаборТестов.Добавить("ТестДолжен_СобратьДваПроцессораВОдин");
	НаборТестов.Добавить("ТестДолжен_ОтфильтроватьЭлементыМеньшеДвух");
	НаборТестов.Добавить("ТестДолжен_ОтсортироватьЭлементы");
	НаборТестов.Добавить("ТестДолжен_ОтсортироватьТаблицуПоКолонке");
	
КонецПроцедуры

#КонецОбласти

#Область Тесты

&НаКлиенте
Процедура ТестДолжен_ПолучитьИзПроцессораКоллекцийМассив() Экспорт
	ПроцессорКоллекций = ПолучитьПроцессорКоллекций();
	Результат = ПроцессорКоллекций.ВМассив();
	Ожидаем.Что(Результат).ИмеетТип("Массив").ИмеетДлину(ПолучитьДлинуИсходногоМассива());
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПолучитьПервыеНесколькоЭлементов() Экспорт
	ПроцессорКоллекций = ПолучитьПроцессорКоллекций();
	Результат = ПроцессорКоллекций.Первые(2).ВМассив();
	Ожидаем.Что(Результат).ИмеетДлину(2);
	Ожидаем.Что(Результат[0]).Равно(2);
	Ожидаем.Что(Результат[1]).Равно(1);
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПропуститьНесколькоЭлементов() Экспорт
	ПроцессорКоллекций = ПолучитьПроцессорКоллекций();
	Результат = ПроцессорКоллекций.Пропустить(3).ВМассив();
	Ожидаем.Что(Результат).ИмеетДлину(ПолучитьДлинуИсходногоМассива() - 3);
	Ожидаем.Что(Результат[0]).Равно(1);
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПолучитьРазличныеЭлементы() Экспорт
	ПроцессорКоллекций = ПолучитьПроцессорКоллекций();
	Результат = ПроцессорКоллекций.Различные().ВМассив();
	Ожидаем.Что(Результат).ИмеетДлину(5);

	Ожидаем.Что(Результат[0]).Равно(2);
	Ожидаем.Что(Результат[1]).Равно(1);
	Ожидаем.Что(Результат[2]).Равно(4);
	Ожидаем.Что(Результат[3]).Равно(0);
	Ожидаем.Что(Результат[4]).Равно(3);
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПолучитьУвеличитьВсеЭлементыНаЕдиницуЧерезОбработку() Экспорт
	ПроцессорКоллекций = ПолучитьПроцессорКоллекций();
	Результат = ПроцессорКоллекций.Обработать("Результат = Элемент + 1").ВМассив();
	ИсходныйМассив = ПолучитьИсходныйМассив();
	Для сч = 0 По ИсходныйМассив.ВГраница() Цикл
		Ожидаем.Что(Результат[сч]).Равно(ИсходныйМассив[сч] + 1);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_СобратьДваПроцессораВОдин() Экспорт
	
	ПроцессорКоллекций = ПолучитьПроцессорКоллекций();
	Результат = ПроцессорКоллекций.Развернуть(
			"Массив = Новый Массив;
			|Массив.Добавить(Элемент);
			|Массив.Добавить(Элемент + 1);
			|Результат = ПроцессорыКоллекций.ИзКоллекции(Массив)"
		).Фильтровать("Результат = Элемент = 2")
		.Количество();
	
	Ожидаем.Что(Результат, "Процессоры коллекций должны сложиться и отфильтроваться").Равно(3);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ОтфильтроватьЭлементыМеньшеДвух() Экспорт
	ПроцессорКоллекций = ПолучитьПроцессорКоллекций();
	Результат = ПроцессорКоллекций.Фильтровать("Результат = Элемент < 2").ВМассив();
	Для Каждого Элемент Из Результат Цикл
		Ожидаем.Что(Элемент).Меньше(2);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ОтсортироватьЭлементы() Экспорт
	ПроцессорКоллекций = ПолучитьПроцессорКоллекций();
	Результат = ПроцессорКоллекций.Сортировать().ВМассив();
	ПредыдущийЭлемент = -1;
	Для Каждого Элемент Из Результат Цикл
		Ожидаем.Что(Элемент).БольшеИлиРавно(ПредыдущийЭлемент);
		ПредыдущийЭлемент = Макс(Элемент, ПредыдущийЭлемент);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ОтсортироватьТаблицуПоКолонке() Экспорт
	
	ИнициализироватьТаблицу();
	
	Таблица = мТаблица;
	
	ПроцессорКоллекций = ПроцессорыКоллекций.ИзКоллекции(Таблица);
	Результат = ПроцессорКоллекций.СортироватьПо("НомерСтроки").ВМассив();
	
	Для сч = 0 По Таблица.Количество() - 1 Цикл
		Ожидаем.Что(Таблица[сч].НомерСтроки = сч);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализироватьТаблицу()
	
	ДобавляемыеРеквизиты = Новый Массив;
	УдаляемыеРеквизиты = Новый Массив;
	
	Таблица = РеквизитФормыВЗначение("мТаблица");
	
	Для Каждого ТекКолонка из Таблица.Колонки Цикл
		УдаляемыеРеквизиты.Добавить("мТаблица." + ТекКолонка.Имя);
	КонецЦикла;
	
	Таблица.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	
	Для Каждого ТекКолонка из Таблица.Колонки Цикл
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ТекКолонка.Имя, ТекКолонка.ТипЗначения, "мТаблица"));
	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	Таблица.Добавить().НомерСтроки = 2;
	Таблица.Добавить().НомерСтроки = 3;
	Таблица.Добавить().НомерСтроки = 1;
	
	ЗначениеВРеквизитФормы(Таблица, "мТаблица");
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИсходныйМассив()
	
	Массив = Новый Массив;
	Массив.Добавить(2);
	Массив.Добавить(1);
	Массив.Добавить(4);
	Массив.Добавить(1);
	Массив.Добавить(0);
	Массив.Добавить(3);

	Возврат Массив;

КонецФункции

&НаКлиенте
Функция ПолучитьДлинуИсходногоМассива()
	Возврат ПолучитьИсходныйМассив().Количество();
КонецФункции

&НаКлиенте
Функция ПолучитьПроцессорКоллекций()
	Массив = ПолучитьИсходныйМассив();
	Возврат ПроцессорыКоллекций.ИзКоллекции(Массив);
КонецФункции

#КонецОбласти
