#Область ОписаниеПеременных

Перем КонтекстЯдра; // Фреймворк тестирования
Перем Ожидаем;      // Ассерты

Перем ФункцияОбработки;
Перем ФункцияСокращения;
Перем ФункцияФильтрации;

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область СобытияФреймворкаТестирования

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	
	КонтекстЯдра = КонтекстЯдраПараметр;
	Ожидаем      = КонтекстЯдра.Плагин("УтвержденияBDD");
	
	ФункцияФильтрации = ПроцессорыКоллекций.НовыйОписаниеОповещения("ОбработчикФильтрации", ЭтотОбъект);
	ФункцияОбработки  = ПроцессорыКоллекций.НовыйОписаниеОповещения("ОбработчикОбработки",  ЭтотОбъект);
	ФункцияСокращения = ПроцессорыКоллекций.НовыйОписаниеОповещения("ОбработчикСокращения", ЭтотОбъект);
	
КонецПроцедуры

Процедура ЗаполнитьНаборТестов(НаборТестов, КонтекстЯдраПараметр) Экспорт
	
	КонтекстЯдра = КонтекстЯдраПараметр;
	
	НаборТестов.Добавить("ТестДолжен_1");
	НаборТестов.Добавить("ТестДолжен_2");
	НаборТестов.Добавить("ТестДолжен_3");
	НаборТестов.Добавить("ТестДолжен_4");
	НаборТестов.Добавить("ТестДолжен_5");
	НаборТестов.Добавить("ТестДолжен_6");
	НаборТестов.Добавить("ТестДолжен_7");
	НаборТестов.Добавить("ТестДолжен_8");
	
КонецПроцедуры

#КонецОбласти

#Область Тесты

Процедура ТестДолжен_1() Экспорт

	ПроцессорКоллекций = ПроцессорыКоллекций.НовыйПроцессорКоллекций();
	ПроцессорКоллекций.УстановитьКоллекцию(ПолучитьНачальныйМассив());

	Результат = ПроцессорКоллекций
		.Пропустить(2)
		.Фильтровать(ФункцияФильтрации)
		.Первые(2)
		.Обработать(ФункцияОбработки)
		.Получить(Тип("Массив"));

	Ожидаем.Что(Результат[0]).Равно(8);
	Ожидаем.Что(Результат[1]).Равно(6);

КонецПроцедуры

Процедура ТестДолжен_2() Экспорт

	ПроцессорКоллекций = ПроцессорыКоллекций.ИзКоллекции(ПолучитьНачальныйМассив());
	Результат = ПроцессорКоллекций
		.Сортировать()
		.ВМассив();

	Ожидаем.Что(Результат[0]).Равно(0);
	Ожидаем.Что(Результат[1]).Равно(1);
	Ожидаем.Что(Результат[2]).Равно(3);
	Ожидаем.Что(Результат[3]).Равно(4);
	Ожидаем.Что(Результат[4]).Равно(5);
	Ожидаем.Что(Результат[5]).Равно(7);

КонецПроцедуры

Процедура ТестДолжен_3() Экспорт

	ПроцессорКоллекций = ПроцессорыКоллекций.ИзКоллекции(ПолучитьНачальныйМассив());
	Результат = ПроцессорКоллекций
		.Обработать(ФункцияОбработки)
		.Сократить(ФункцияСокращения, 0);

	Ожидаем.Что(Результат).Равно(26);

КонецПроцедуры

Процедура ТестДолжен_4() Экспорт

	// Результат должен различаться
	Результат = ПроцессорыКоллекций
		.ИзКоллекции(ПолучитьНачальныйМассив())
		.Сортировать()
		.Первые(1)
		.Получить("Массив");
	
	Ожидаем.Что(Результат[0]).Равно(0);
	Ожидаем.Что(ПолучитьНачальныйМассив()[0]).Равно(3);
	
КонецПроцедуры

Процедура ТестДолжен_5() Экспорт
	Строка = "ФЫВА";
	Результат = ПроцессорыКоллекций
		.ИзСтроки(Строка)
		.Сортировать()
		.ВСтроку();
	
	Ожидаем.Что(Результат).Равно("АВФЫ");
	
КонецПроцедуры

Процедура ТестДолжен_6() Экспорт

	Строка = "Я строка с пробелами";
	Результат = ПроцессорыКоллекций
		.ИзСтроки(Строка, " ")
		.ВСтроку();
	
	Ожидаем.Что(Результат).Равно("Ястрокаспробелами");

КонецПроцедуры

Процедура ТестДолжен_7() Экспорт
	
	Строка = "Я
	|строка
	|многострочная";

	Результат = ПроцессорыКоллекций
		.ИзСтроки(Строка, Символы.ПС)
		.Сортировать()
		.ВСтроку(Символы.ПС);
	
	Ожидаем.Что(Результат).Равно("многострочная
		|строка
		|Я");

КонецПроцедуры

Процедура ТестДолжен_8() Экспорт

	Строка = "Я
	|строка
	|многострочная";

	Результат = ПроцессорыКоллекций
		.ИзСтроки(Строка, Символы.ПС)
		.Фильтровать("Результат = СтрДлина(Элемент) > 1")
		.ВСтроку(Символы.ПС);

	Ожидаем.Что(Результат).Равно("строка
		|многострочная");

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработчикФильтрации(Результат, ДополнительныеПараметры) Экспорт
	Элемент = ДополнительныеПараметры.Элемент;
	Результат = Элемент > 3;
КонецПроцедуры

Процедура ОбработчикОбработки(Результат, ДополнительныеПараметры) Экспорт
	Элемент = ДополнительныеПараметры.Элемент;
	Результат = Элемент + 1;
КонецПроцедуры

Процедура ОбработчикСокращения(Результат, ДополнительныеПараметры) Экспорт
	Элемент = ДополнительныеПараметры.Элемент;
	Результат = Результат + Элемент;
КонецПроцедуры

Функция ПолучитьНачальныйМассив()
	
	Массив = Новый Массив;
	Массив.Добавить(3);
	Массив.Добавить(4);
	Массив.Добавить(7);
	Массив.Добавить(5);
	Массив.Добавить(1);
	Массив.Добавить(0);
	
	Возврат Массив;
	
КонецФункции

Функция ПолучитьПроцессорКоллекций()
	
	Возврат ПроцессорыКоллекций.ИзКоллекции(ПолучитьНачальныйМассив());
	
КонецФункции

#КонецОбласти
