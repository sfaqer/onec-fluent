#Область ОписаниеПеременных

// Аккамулирует шаги конвеера
Перем Конвейер;

// Коллекция для потоковой обработки
Перем Коллекция;

// Кэш колонок коллекции таблицы
Перем КэшКолонок;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Устанавливает коллекцию для обработки Процессора коллекций.
//
// Параметры:
//   НоваяКоллекция - Массив, ТаблицаЗначений, ДеревоЗначений, ... - Коллекция, устанавливаемая в процессор.
//
Процедура УстановитьКоллекцию(НоваяКоллекция) Экспорт
	ПроцессорыКоллекцийКлиентСерверСлужебный.УстановитьКоллекцию(Коллекция, КэшКолонок, НоваяКоллекция);
КонецПроцедуры

#Область КонвейерныеМетоды

// Получить первые N элементов.
// Конвейерный метод.
//
// Параметры:
//   Количество - Число - Число отбираемых элементов.
//
//  Возвращаемое значение:
//   ОбработкаОбъект.ПроцессорКоллекций - Инстанс класса "ПроцессорКоллекций".
//
Функция Первые(Количество) Экспорт
	
	ПроцессорыКоллекцийКлиентСерверСлужебный.Первые(Конвейер, Количество);
	
	Возврат ЭтотОбъект;

КонецФункции

// Пропустить первые N элементов.
// Конвейерный метод.
//
// Параметры:
//   Количество - Число - Число пропускаемых элементов.
//
// Возвращаемое значение:
//   ОбработкаОбъект.ПроцессорКоллекций - Инстанс класса "ПроцессорКоллекций".
//
Функция Пропустить(Количество) Экспорт
	
	ПроцессорыКоллекцийКлиентСерверСлужебный.Пропустить(Конвейер, Количество);
	
	Возврат ЭтотОбъект;

КонецФункции

// Выбрать различные элементы.
// Конвейерный метод.
//
// Параметры:
//   ФункцияСравнения - Строка, ПроцессорыКоллекций.НовыйОписаниеОповещения - Функция сравнения.
//		В случае передачи Строки формируется служебное описание оповещения, в контексте которого заданы переменные
//		"Результат", "ДополнительныеПараметры", "Элемент1", "Элемент2".
//		В случае передачи ОписанияОповещения обработчик данного описания должен содержать два параметра 
//		(имена произвольные):
//			"Результат" - Булево - Переменная, в которой возвращается значение работы функции.
//			"ДополнительныеПараметры" - Структура - Структура параметров, передаваемая функции.
//		Если параметр не передан, выполняется стандартная функция сравнения:
//		см. ПроцессорыКоллекций.СтандартнаяФункцияСравнения()
//		
//   ДополнительныеПараметры - Структура - Структура дополнительных параметров, передаваемая функции сравнения.
//		Служит для передачи дополнительных данных из прикладного кода в функцию сравнения.
//		По умолчанию содержит два значения - Элемент1 и Элемент2.
//
//  Возвращаемое значение:
//   ОбработкаОбъект.ПроцессорКоллекций - Инстанс класса "ПроцессорКоллекций".
//
//  Примеры:
//		1:
//		ПроцессорКоллекций.Различные("Результат = Элемент1 > Элемент2");
//
//		2:
//		Процедура МояФункцияСравнения(Результат, ДополнительныеПараметры) Экспорт
//			Результат = ДополнительныеПараметры.Элемент1 > ДополнительныеПараметры.Элемент2;
//		КонецПроцедуры
//		
//		ФункцияСравнения = ПроцессорыКоллекций.НовыйОписаниеОповещения("МояФункцияСравнения", ЭтотОбъект);
//		ПроцессорКоллекций.Различные(ФункцияСравнения);
//
Функция Различные(Знач ФункцияСравнения = Неопределено, Знач ДополнительныеПараметры = Неопределено) Экспорт

	ПроцессорыКоллекцийКлиентСерверСлужебный.Различные(
		Конвейер,
		ФункцияСравнения,
		ДополнительныеПараметры
	);
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Обработать каждый элемент коллекции.
// Конвейерный метод.
//
// Параметры:
//   ФункцияОбработки - Строка, ПроцессорыКоллекций.НовыйОписаниеОповещения - функция обработки.
//		В случае передачи Строки формируется служебное описание оповещения, в контексте которого заданы переменные
//		"Результат", "ДополнительныеПараметры", "Элемент".
//		В случае передачи ОписанияОповещения обработчик данного описания должен содержать два параметра 
//		(имена произвольные):
//			"Результат" - Произвольный - Переменная, в которой возвращается значение работы обработчика.
//			"ДополнительныеПараметры" - Структура - Структура параметров, передаваемая обработчику.
//		
//   ДополнительныеПараметры - Структура - Структура дополнительных параметров, передаваемая функции обработки.
//		Служит для передачи дополнительных данных из прикладного кода в функцию обработки.
//		По умолчанию содержит одно значение - Элемент.
//
//  Возвращаемое значение:
//   ОбработкаОбъект.ПроцессорКоллекций - Инстанс класса "ПроцессорКоллекций".
//
//  Примеры:
//		1:
//		ПроцессорКоллекций.Обработать("Результат = Элемент + 1;");
//
//		2:
//		Процедура МояФункцияОбработки(Результат, ДополнительныеПараметры) Экспорт
//			Результат = ДополнительныеПараметры.Элемент + 1;
//		КонецПроцедуры
//		
//		ФункцияОбработки = ПроцессорыКоллекций.НовыйОписаниеОповещения("МояФункцияОбработки", ЭтотОбъект);
//		ПроцессорКоллекций.Обработать(ФункцияОбработки);
//
Функция Обработать(Знач ФункцияОбработки, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	ПроцессорыКоллекцийКлиентСерверСлужебный.Обработать(
		Конвейер,
		ФункцияОбработки,
		ДополнительныеПараметры
	);
	
	Возврат ЭтотОбъект;

КонецФункции

// Развернуть каждый элемент коллекции в процессор коллекций.
// Позволяет расширить имеющуюся коллекцию.
// Например, разворачивание массива массивов сделает новый массив, содержащий все элементы всех массивов.
// Конвейерный метод.
//
// Параметры:
//	ФункцияРазворачивания - Строка, ПроцессорыКоллекций.НовыйОписаниеОповещения - функция разворачивания.
//		В случае передачи Строки формируется служебное описание оповещения, в контексте которого заданы переменные
//		"Результат", "ДополнительныеПараметры", "Элемент".
//		В случае передачи ОписанияОповещения обработчик данного описания должен содержать два параметра 
//		(имена произвольные):
//			Результат - ПроцессорКоллекций - Переменная, в которую должен быть
//                                           помещен результат работы функции в виде ПроцессораКоллекций.
//			ДополнительныеПараметры - Структура - Структура параметров, передаваемая функции разворачивания.
//		
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров, передаваемая функции разворачивания.
//		Служит для передачи дополнительных данных из прикладного кода в функцию разворачивания.
//		По умолчанию содержит одно значение - Элемент.
//
// Возвращаемое значение:
//	ОбработкаОбъект.ПроцессорКоллекций - Инстанс класса "ПроцессорКоллекций".
//
// Примеры:
//	1:
//	ПроцессорКоллекций.Развернуть("Результат = ПроцессорыКоллекций.ИзСтроки(Элемент);");
//
//	2:
//	Процедура МояФункцияРазворачивания(Результат, ДополнительныеПараметры) Экспорт
//		Результат = ПроцессорыКоллекций.ИзСтроки(ДополнительныеПараметры.Элемент);
//	КонецПроцедуры
//	
//	ФункцияРазворачивания = ПроцессорыКоллекций.НовыйОписаниеОповещения("МояФункцияРазворачивания", ЭтотОбъект);
//	ПроцессорКоллекций.Развернуть(ФункцияРазворачивания);
//
Функция Развернуть(Знач ФункцияРазворачивания, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	ПроцессорыКоллекцийКлиентСерверСлужебный.Развернуть(
		Конвейер,
		ФункцияРазворачивания,
		ДополнительныеПараметры
	);
	
	Возврат ЭтотОбъект;

КонецФункции

// Фильтровать коллекцию по условию.
// Конвейерный метод.
//
// Параметры:
//   ФункцияФильтрации - Строка, ПроцессорыКоллекций.НовыйОписаниеОповещения - Функция фильтрации.
//		В случае передачи Строки формируется служебное описание оповещения, в контексте которого заданы переменные
//		"Результат", "ДополнительныеПараметры", "Элемент".
//		В случае передачи ОписанияОповещения обработчик данного описания должен содержать два параметра 
//		(имена произвольные):
//			"Результат" - Булево - Переменная, в которой возвращается значение работы функции.
//			"ДополнительныеПараметры" - Структура - Структура параметров, передаваемая функции.
//		
//   ДополнительныеПараметры - Структура - Структура дополнительных параметров, передаваемая функции фильтрации.
//		Служит для передачи дополнительных данных из прикладного кода в функцию фильтрации.
//		По умолчанию содержит одно значение - Элемент.
//
//  Возвращаемое значение:
//   ОбработкаОбъект.ПроцессорКоллекций - Инстанс класса "ПроцессорКоллекций".
//
//  Примеры:
//		1:
//		ПроцессорКоллекций.Фильтровать("Результат = СтрДлина(Элемент) > 1");
//
//		2:
//		Процедура МояПроцедураФильтрации(Результат, ДополнительныеПараметры) Экспорт
//			Результат = СтрДлина(ДополнительныеПараметры.Элемент) > 1;
//		КонецПроцедуры
//		
//		ФункцияФильтрации = ПроцессорыКоллекций.НовыйОписаниеОповещения("МояПроцедураФильтрации", ЭтотОбъект);
//		ПроцессорКоллекций.Фильтровать(ФункцияФильтрации);
//
Функция Фильтровать(Знач ФункцияФильтрации, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	ПроцессорыКоллекцийКлиентСерверСлужебный.Фильтровать(
		Конвейер,
		ФункцияФильтрации,
		ДополнительныеПараметры
	);
	
	Возврат ЭтотОбъект;

КонецФункции

// Сортировать элементы коллекции.
// Конвейерный метод.
//
// Параметры:
//   ФункцияСравнения - Строка, ПроцессорыКоллекций.НовыйОписаниеОповещения - Функция сравнения.
//		В случае передачи Строки формируется служебное описание оповещения, в контексте которого заданы переменные
//		"Результат", "ДополнительныеПараметры", "Элемент1", "Элемент2".
//		В случае передачи ОписанияОповещения обработчик данного описания должен содержать два параметра 
//		(имена произвольные):
//			"Результат" - Булево - Переменная, в которой возвращается значение работы функции.
//			"ДополнительныеПараметры" - Структура - Структура параметров, передаваемая функции.
//		Если параметр не передан, выполняется стандартная функция сравнения:
//		см. ПроцессорыКоллекций.СтандартнаяФункцияСравнения()
//		
//   ДополнительныеПараметры - Структура - Структура дополнительных параметров, передаваемая функции сравнения.
//		Служит для передачи дополнительных данных из прикладного кода в функцию сравнения.
//		По умолчанию содержит два значения - Элемент1 и Элемент2.
//
//  Возвращаемое значение:
//   ОбработкаОбъект.ПроцессорКоллекций - Инстанс класса "ПроцессорКоллекций".
//
//  Примеры:
//		1:
//		ПроцессорКоллекций.Сортировать("Результат = Элемент1 > Элемент2");
//
//		2:
//		Процедура МояФункцияСравнения(Результат, ДополнительныеПараметры) Экспорт
//			Результат = ДополнительныеПараметры.Элемент1 > ДополнительныеПараметры.Элемент2;
//		КонецПроцедуры
//		
//		ФункцияСравнения = ПроцессорыКоллекций.НовыйОписаниеОповещения("МояФункцияСравнения", ЭтотОбъект);
//		ПроцессорКоллекций.Сортировать(ФункцияСравнения);
//
Функция Сортировать(Знач ФункцияСравнения = Неопределено, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	ПроцессорыКоллекцийКлиентСерверСлужебный.Сортировать(
		Конвейер,
		ФункцияСравнения,
		ДополнительныеПараметры
	);
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Сортировать элементы коллекции по выбранному полю.
// Конвейерный метод.
//
// Параметры:
//   ИмяПоля - Строка - Имя поля элемента коллекции, по которому необходимо осуществлять сортировку.
//
//   ФункцияСравнения - Строка, ПроцессорыКоллекций.НовыйОписаниеОповещения - Функция сравнения.
//		В случае передачи Строки формируется служебное описание оповещения, в контексте которого заданы переменные
//		"Результат", "ДополнительныеПараметры", "Элемент1", "Элемент2".
//		В случае передачи ОписанияОповещения обработчик данного описания должен содержать два параметра 
//		(имена произвольные):
//			"Результат" - Булево - Переменная, в которой возвращается значение работы функции.
//			"ДополнительныеПараметры" - Структура - Структура параметров, передаваемая функции.
//		Если параметр не передан, выполняется стандартная функция сравнения:
//		см. ПроцессорыКоллекций.СтандартнаяФункцияСравнения()
//		
//   ДополнительныеПараметры - Структура - Структура дополнительных параметров, передаваемая функции сравнения.
//		Служит для передачи дополнительных данных из прикладного кода в функцию сравнения.
//		По умолчанию содержит два значения - Элемент1 и Элемент2.
//
//  Возвращаемое значение:
//   ОбработкаОбъект.ПроцессорКоллекций - Инстанс класса "ПроцессорКоллекций".
//
//  Примеры:
//		1:
//		ПроцессорКоллекций.СортироватьПо("НомерСтроки", "Результат = Элемент1 > Элемент2");
//
//		2:
//		Процедура МояФункцияСравнения(Результат, ДополнительныеПараметры) Экспорт
//			Результат = ДополнительныеПараметры.Элемент1 > ДополнительныеПараметры.Элемент2;
//		КонецПроцедуры
//		
//		ФункцияСравнения = ПроцессорыКоллекций.НовыйОписаниеОповещения("МояФункцияСравнения", ЭтотОбъект);
//		ПроцессорКоллекций.СортироватьПо("НомерСтроки", ФункцияСравнения);
//
Функция СортироватьПо(
	Знач ИмяПоля,
	Знач ФункцияСравнения = Неопределено,
	Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	ПроцессорыКоллекцийКлиентСерверСлужебный.СортироватьПо(
		Конвейер,
		ИмяПоля,
		ФункцияСравнения,
		ДополнительныеПараметры
	);
	
	Возврат ЭтотОбъект;
	
КонецФункции

#КонецОбласти

#Область ТерминальныеМетоды

// Получить первый элемент.
// Терминальный метод.
//
//  Возвращаемое значение:
//   Произвольный - Первый элемент из коллекции. Если коллекция пуста, возвращает Неопределено.
//
Функция ПолучитьПервый() Экспорт
	
	Возврат ПроцессорыКоллекцийКлиентСерверСлужебный.ПолучитьПервый(
		Конвейер,
		Коллекция,
		КэшКолонок
	);
	
КонецФункции

// Получить коллекцию в виде массива.
// Терминальный метод.
//
//  Возвращаемое значение:
//   Массив - Массив элементов коллекции.
//
Функция ВМассив() Экспорт
	
	Возврат ПроцессорыКоллекцийКлиентСерверСлужебный.ВМассив(
		Конвейер,
		Коллекция,
		КэшКолонок
	);

КонецФункции

// Получить коллекцию в виде строки.
// Терминальный метод.
//
// Параметры:
//	РазделительСтрок - Строка - Используемый разделитель между элементами при конкатенации строк.
// 
//  Возвращаемое значение:
//   Строка - Элементы коллекции, соединенные в строку методом конкатенации.
//
Функция ВСтроку(РазделительСтрок = "") Экспорт
	
	Возврат ПроцессорыКоллекцийКлиентСерверСлужебный.ВСтроку(
		Конвейер,
		Коллекция,
		КэшКолонок,
		РазделительСтрок
	);
	
КонецФункции

// Получить количество элементов коллекции.
// Терминальный метод.
//
//  Возвращаемое значение:
//   Число - Количество элементов коллекции.
//
Функция Количество() Экспорт
	
	Возврат ПроцессорыКоллекцийКлиентСерверСлужебный.Количество(
		Конвейер,
		Коллекция,
		КэшКолонок
	);

КонецФункции

// Обработать каждый элемент коллекции и завершить работу процессора.
// Терминальный метод.
//
// Параметры:
//   ФункцияОбработки - Строка, ПроцессорыКоллекций.НовыйОписаниеОповещения - функция обработки.
//		В случае передачи Строки формируется служебное описание оповещения, в контексте которого заданы переменные
//		"Результат", "ДополнительныеПараметры", "Элемент".
//		В случае передачи ОписанияОповещения обработчик данного описания должен содержать два параметра 
//		(имена произвольные):
//			"Результат" - Произвольный - Игнорируется.
//			"ДополнительныеПараметры" - Структура - Структура параметров, передаваемая обработчику.
//
//   ДополнительныеПараметры - Структура - Структура дополнительных параметров, передаваемая функции обработки.
//		Служит для передачи дополнительных данных из прикладного кода в функцию обработки.
//		По умолчанию содержит одно значение - Элемент.
//
//  Примеры:
//		1:
//		ПроцессорКоллекций.ДляКаждого("Сообщить(Элемент);");
//
//		2:
//		ПроцессорКоллекций.ДляКаждого(ПроцессорыКоллекций.СтандартнаяФункцияОбработки_Сообщить());
//
//		3:
//		Процедура МояФункцияОбработки(Результат, ДополнительныеПараметры) Экспорт
//			Сообщить(ДополнительныеПараметры.Элемент);
//		КонецПроцедуры
//		
//		ФункцияОбработки = ПроцессорыКоллекций.НовыйОписаниеОповещения("МояФункцияОбработки", ЭтотОбъект);
//		ПроцессорКоллекций.ДляКаждого(ФункцияОбработки);
//
Процедура ДляКаждого(Знач ФункцияОбработки, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	ПроцессорыКоллекцийКлиентСерверСлужебный.ДляКаждого(
		Конвейер,
		Коллекция,
		КэшКолонок,
		ФункцияОбработки,
		ДополнительныеПараметры
	);
	
КонецПроцедуры

// Получить минимальный элемент.
// Терминальный метод.
//
// Параметры:
//   ФункцияСравнения - Строка, ПроцессорыКоллекций.НовыйОписаниеОповещения - Функция сравнения.
//		В случае передачи Строки формируется служебное описание оповещения, в контексте которого заданы переменные
//		"Результат", "ДополнительныеПараметры", "Элемент1", "Элемент2".
//		В случае передачи ОписанияОповещения обработчик данного описания должен содержать два параметра 
//		(имена произвольные):
//			"Результат" - Булево - Переменная, в которой возвращается значение работы функции.
//			"ДополнительныеПараметры" - Структура - Структура параметров, передаваемая функции.
//		Если параметр не передан, выполняется стандартная функция сравнения:
//		см. ПроцессорыКоллекций.СтандартнаяФункцияСравнения()
//		
//   ДополнительныеПараметры - Структура - Структура дополнительных параметров, передаваемая функции сравнения.
//		Служит для передачи дополнительных данных из прикладного кода в функцию сравнения.
//		По умолчанию содержит два значения - Элемент1 и Элемент2.
//
//  Возвращаемое значение:
//   Произвольный - минимальный элемент коллекции.
//
//  Примеры:
//		1:
//		ПроцессорКоллекций.Минимум();
//
//		2:
//		ПроцессорКоллекций.Минимум("Результат = Элемент1 > Элемент2");
//
//		3:
//		Процедура МояФункцияСравнения(Результат, ДополнительныеПараметры) Экспорт
//			Результат = ДополнительныеПараметры.Элемент1 > ДополнительныеПараметры.Элемент2;
//		КонецПроцедуры
//		
//		ФункцияСравнения = ПроцессорыКоллекций.НовыйОписаниеОповещения("МояФункцияСравнения", ЭтотОбъект);
//		ПроцессорКоллекций.Минимум(ФункцияСравнения);
//
Функция Минимум(Знач ФункцияСравнения = Неопределено, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ПроцессорыКоллекцийКлиентСерверСлужебный.Минимум(
		Конвейер,
		Коллекция,
		КэшКолонок,
		ФункцияСравнения,
		ДополнительныеПараметры
	);
	
КонецФункции

// Получить максимальный элемент.
// Терминальный метод.
//
// Параметры:
//   ФункцияСравнения - Строка, ПроцессорыКоллекций.НовыйОписаниеОповещения - Функция сравнения.
//		В случае передачи Строки формируется служебное описание оповещения, в контексте которого заданы переменные
//		"Результат", "ДополнительныеПараметры", "Элемент1", "Элемент2".
//		В случае передачи ОписанияОповещения обработчик данного описания должен содержать два параметра 
//		(имена произвольные):
//			"Результат" - Булево - Переменная, в которой возвращается значение работы функции.
//			"ДополнительныеПараметры" - Структура - Структура параметров, передаваемая функции.
//		Если параметр не передан, выполняется стандартная функция сравнения:
//		см. ПроцессорыКоллекций.СтандартнаяФункцияСравнения()
//		
//   ДополнительныеПараметры - Структура - Структура дополнительных параметров, передаваемая функции сравнения.
//		Служит для передачи дополнительных данных из прикладного кода в функцию сравнения.
//		По умолчанию содержит два значения - Элемент1 и Элемент2.
//
//  Возвращаемое значение:
//   Произвольный - максимальный элемент коллекции.
//
//  Примеры:
//		1:
//		ПроцессорКоллекций.Максимум();
//
//		2:
//		ПроцессорКоллекций.Максимум("Результат = Элемент1 > Элемент2");
//
//		3:
//		Процедура МояФункцияСравнения(Результат, ДополнительныеПараметры) Экспорт
//			Результат = ДополнительныеПараметры.Элемент1 > ДополнительныеПараметры.Элемент2;
//		КонецПроцедуры
//		
//		ФункцияСравнения = ПроцессорыКоллекций.НовыйОписаниеОповещения("МояФункцияСравнения", ЭтотОбъект);
//		ПроцессорКоллекций.Максимум(ФункцияСравнения);
//
Функция Максимум(Знач ФункцияСравнения = Неопределено, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ПроцессорыКоллекцийКлиентСерверСлужебный.Максимум(
		Конвейер,
		Коллекция,
		КэшКолонок,
		ФункцияСравнения,
		ДополнительныеПараметры
	);
	
КонецФункции

// Выполнить агрегатную функцию над элементами коллекции.
// Терминальный метод.
//
// Параметры:
//   ФункцияСокращения - Строка, ПроцессорыКоллекций.НовыйОписаниеОповещения - Функция сокращения.
//		В случае передачи Строки формируется служебное описание оповещения, в контексте которого заданы переменные
//		"Результат", "ДополнительныеПараметры", "Элемент".
//		В случае передачи ОписанияОповещения обработчик данного описания должен содержать два параметра 
//		(имена произвольные):
//			"Результат" - Произвольный - Переменная, в которой возвращается значение работы функции.
//			"ДополнительныеПараметры" - Структура - Структура параметров, передаваемая функции.
//
//   НачальноеЗначение - Произвольный - начальное значение, передаваемое в функцию сокращения в параметр "Результат"
//
//   ДополнительныеПараметры - Структура - Структура дополнительных параметров, передаваемая функции сокращения.
//		Служит для передачи дополнительных данных из прикладного кода в функцию сокращения.
//		По умолчанию содержит одно значение - Элемент.
//
//  Возвращаемое значение:
//   Произвольный - результат работы агрегатной функции.
//
//  Примеры:
//		2:
//		ПроцессорКоллекций.Сократить("Результат = Результат + Элемент");
//
//		2:
//		Процедура МояФункцияСокращения(Результат, ДополнительныеПараметры) Экспорт
//				Элемент = ДополнительныеПараметры.Элемент;
//				Результат = Результат + Элемент;
//		КонецПроцедуры
//		
//		ФункцияСокращения = ПроцессорыКоллекций.НовыйОписаниеОповещения("МояФункцияСокращения", ЭтотОбъект);
//		ПроцессорКоллекций.Сократить(ФункцияСокращения);
//
Функция Сократить(
	Знач ФункцияСокращения,
	Знач НачальноеЗначение = Неопределено,
	Знач ДополнительныеПараметры = Неопределено) Экспорт

	Возврат ПроцессорыКоллекцийКлиентСерверСлужебный.Сократить(
		Конвейер,
		Коллекция,
		КэшКолонок,
		ФункцияСокращения,
		НачальноеЗначение,
		ДополнительныеПараметры
	);
	
КонецФункции

// Получить коллекцию в виде объекта заданного типа.
// Терминальный метод.
//
// Параметры:
//   ТипРезультата - Тип - Тип, в котором необходимо вернуть коллекцию.
//
//  Возвращаемое значение:
//   Произвольный - Коллекция в виде объекта нужного типа.
//
Функция Получить(ТипРезультата) Экспорт
	
	Возврат ПроцессорыКоллекцийКлиентСерверСлужебный.Получить(
		Конвейер,
		Коллекция,
		КэшКолонок,
		ТипРезультата
	);

КонецФункции

// Проверить, что хотя бы один элемент коллекции удовлетворяет условию в функции сравнения.
// Терминальный метод.
//
// Параметры:
//   ФункцияСравнения - Строка, ПроцессорыКоллекций.НовыйОписаниеОповещения - Функция сравнения.
//		В случае передачи Строки формируется служебное описание оповещения, в контексте которого заданы переменные
//		"Результат", "ДополнительныеПараметры", "Элемент".
//		В случае передачи ОписанияОповещения обработчик данного описания должен содержать два параметра 
//		(имена произвольные):
//			"Результат" - Булево - Переменная, в которой возвращается значение работы функции.
//			"ДополнительныеПараметры" - Структура - Структура параметров, передаваемая функции.
//
//   ДополнительныеПараметры - Структура - Структура дополнительных параметров, передаваемая функции сравнения.
//		Служит для передачи дополнительных данных из прикладного кода в функцию сравнения.
//		По умолчанию содержит одно значение - Элемент.
//
//  Возвращаемое значение:
//   Булево - Истина, если минимум один из элементов коллекции удовлетворяет условию Функции сравнения.
//		В обратном случае возвращает Ложь.
//		Если коллекция пустая, возвращает Ложь.
//
Функция ЛюбойСоответствует(Знач ФункцияСравнения, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ПроцессорыКоллекцийКлиентСерверСлужебный.ЛюбойСоответствует(
		Конвейер,
		Коллекция,
		КэшКолонок,
		ФункцияСравнения,
		ДополнительныеПараметры
	);
	
КонецФункции

// Проверить, что все элементы коллекции удовлетворяют условию в функции сравнения.
// Терминальный метод.
//
// Параметры:
//   ФункцияСравнения - Строка, ПроцессорыКоллекций.НовыйОписаниеОповещения - Функция сравнения.
//		В случае передачи Строки формируется служебное описание оповещения, в контексте которого заданы переменные
//		"Результат", "ДополнительныеПараметры", "Элемент".
//		В случае передачи ОписанияОповещения обработчик данного описания должен содержать два параметра 
//		(имена произвольные):
//			"Результат" - Булево - Переменная, в которой возвращается значение работы функции.
//			"ДополнительныеПараметры" - Структура - Структура параметров, передаваемая функции.
//
//   ДополнительныеПараметры - Структура - Структура дополнительных параметров, передаваемая функции сравнения.
//		Служит для передачи дополнительных данных из прикладного кода в функцию сравнения.
//		По умолчанию содержит одно значение - Элемент.
//
//  Возвращаемое значение:
//   Булево - Истина, если все элементы коллекции удовлетворяют условию Функции сравнения.
//		В обратном случае возвращает Ложь.
//		Если коллекция пустая, возвращает Истина.
//
Функция ВсеСоответствуют(Знач ФункцияСравнения, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ПроцессорыКоллекцийКлиентСерверСлужебный.ВсеСоответствуют(
		Конвейер,
		Коллекция,
		КэшКолонок,
		ФункцияСравнения,
		ДополнительныеПараметры
	);
	
КонецФункции

// Проверить, что все элементы коллекции не удовлетворяют условию в функции сравнения.
// Терминальный метод.
//
// Параметры:
//   ФункцияСравнения - Строка, ПроцессорыКоллекций.НовыйОписаниеОповещения - Функция сравнения.
//		В случае передачи Строки формируется служебное описание оповещения, в контексте которого заданы переменные
//		"Результат", "ДополнительныеПараметры", "Элемент".
//		В случае передачи ОписанияОповещения обработчик данного описания должен содержать два параметра 
//		(имена произвольные):
//			"Результат" - Булево - Переменная, в которой возвращается значение работы функции.
//			"ДополнительныеПараметры" - Структура - Структура параметров, передаваемая функции.
//
//   ДополнительныеПараметры - Структура - Структура дополнительных параметров, передаваемая функции сравнения.
//		Служит для передачи дополнительных данных из прикладного кода в функцию сравнения.
//		По умолчанию содержит одно значение - Элемент.
//
//  Возвращаемое значение:
//   Булево - Истина, если все элементы коллекции не удовлетворяют условию Функции сравнения.
//		В обратном случае возвращает Ложь.
//		Если коллекция пустая, возвращает Истина.
//
Функция ВсеНеСоответствуют(Знач ФункцияСравнения, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ПроцессорыКоллекцийКлиентСерверСлужебный.ВсеНеСоответствуют(
		Конвейер,
		Коллекция,
		КэшКолонок,
		ФункцияСравнения,
		ДополнительныеПараметры
	);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Инициализация

Конвейер = Новый Массив;

#КонецОбласти
